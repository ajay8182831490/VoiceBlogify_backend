generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String?
  googleId          String?        @unique
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  name              String?
  expiryTime        DateTime?
  otp               Int?
  tokens            Token[]
  subscriptions     Subscription[]
  userAccessToken   String?
  freeTrialStart    DateTime?
  role              UserRole       @default(USER)
  profilepic        String?
  payments          Payment[]
  blogCount         Int            @default(0)
  isVerified        Boolean        @default(false)
  post              Post[]
  RefreshToken String?

  lastActiveDay   DateTime @default(now())
}

model Token {
  id              Int          @id @default(autoincrement())
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  platform        Platform
  platformUserId  String?      // Unique ID for the user's account on the platform
  accessToken     String?       // Access token for API requests
  refreshToken    String?      // Refresh token, if applicable
  mediumApi       String?
  postUrns        String[]
  expiryTime      String?
  mediumUserId    String?

  

  @@unique([userId, platform])
}

model Post {
  id             Int          @id @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  title          String?
  subtitle       String?
  tags           String[]
  content        String
  dateOfCreation DateTime      @default(now())
}

model Subscription {
  id                String        @id @default(uuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  plan              Plan          @default(FREE)
  status            String        @default("ACTIVE")
  startDate         DateTime      @default(now())
  endDate           DateTime?
  isActive          Boolean       @default(true)
  billingCycle      BillingCycle  @default(MONTHLY)
  trialEndDate      DateTime?
  remainingPosts    Int           @default(1)
  nextDueDate       DateTime?
  invoiceLink       String?
  payments          Payment[]
  features          PlanFeature[] // Relation to PlanFeature defined here
}


model PlanFeature {
  id              Int            @id @default(autoincrement())
  plan            Plan   
  featureName     String
  description     String?
  limit           Int
  billingCycle    BillingCycle?
  subscriptionId  String?        // Optional relationship to a Subscription if needed
  subscription    Subscription?  @relation(fields: [subscriptionId], references: [id])
}
model Payment {
  id              Int            @id @default(autoincrement())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  subscriptionId  String
  subscription    Subscription   @relation(fields: [subscriptionId], references: [id])
  amount          Float
  paymentDate     DateTime       @default(now()) // Date of the payment transaction
  paymentMethod   PaymentMethod  @default(PAYPAL) // Method used for the payment (only PayPal)
  status          String         @default("COMPLETED") // Payment status: COMPLETED, PENDING, FAILED
}

enum Platform {
  LINKEDIN
  MEDIUM
  BLOGGER
}

enum UserRole {
  USER
  ADMIN
}

enum Plan {
  FREE
  BASIC
  PREMIUM
  BUISNESS
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentMethod {
  PAYPAL
}
