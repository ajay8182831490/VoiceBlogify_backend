

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String?  
  googleId    String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?
  expiryTime  DateTime?
  otp         Int?
  tokens      Token[]  
  subscriptions Subscription[] 
  userAccessToken String?  
  freeTrialStart DateTime?  
  role        UserRole  @default(USER)
  profilepic  String?
  payments    Payment[] 
  features    Feature[]  
  blogCount   Int @default(0)
  isVerified  Boolean @default(false)
  post        Post[]
}

model Token {
  id            Int        @id @default(autoincrement())
  userId        String      
  user          User       @relation(fields: [userId], references: [id])
  platform      Platform   
  platformUserId String?    // Unique ID for the user's account on the platform
  accessToken   String     // Access token for API requests
  refreshToken  String?    // Refresh token, if applicable
  mediumApi String?
  postUrns    String[]   
  expiryTime  String?
  
  @@unique([userId, platform])
}

model Post {
  id             Int       @id @default(autoincrement()) 
  userId         String                                 
  user           User      @relation(fields: [userId], references: [id]) 
  title          String?                               
  subtitle       String?                              
  tags           String[]                               
  content        String                                  
  dateOfCreation DateTime? @default(now())    
}

enum Platform {
  LINKEDIN
  MEDIUM
  BLOGGER
}

enum UserRole {
  USER
  ADMIN
}

enum Plan {
  FREE
  BASIC
  PREMIUM
  BUSINESS 
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

model Subscription {
  id                    String        @id @default(uuid())
  userId                String        // Foreign key reference to User
  user                  User          @relation(fields: [userId], references: [id])
  plan                  Plan          // User's subscription plan
  status                String        @default("ACTIVE") // Possible statuses: ACTIVE, CANCELED, etc.
  startDate             DateTime      @default(now()) // Subscription start date
  endDate               DateTime?     // Nullable: Subscription end date
  isActive              Boolean       @default(true) // Indicates if the subscription is active
  billingCycle          BillingCycle   // Defines the billing cycle (monthly/yearly)
  trialEndDate          DateTime?     // Nullable: End date of free trial period
  remainingPosts        Int           @default(0) // Remaining posts based on the subscription plan
  nextDueDate          DateTime?     // Nullable: Next payment due date
  invoiceLink           String?       // Link to the latest invoice
  payments              Payment[]     // List of payments associated with the subscription
}

model Payment {
  id              Int            @id @default(autoincrement())
  userId          String         // Foreign key reference to User
  user            User           @relation(fields: [userId], references: [id])
  subscriptionId  String         // Foreign key reference to Subscription
  subscription    Subscription   @relation(fields: [subscriptionId], references: [id])
  amount          Float          // Amount paid in the transaction
  paymentDate     DateTime       @default(now()) // Date of the payment transaction
  paymentMethod   PaymentMethod  @default(PAYPAL) // Method used for the payment (only PayPal)
  status          String         @default("COMPLETED") // Payment status: COMPLETED, PENDING, FAILED
}

enum PaymentMethod {
  PAYPAL // Only PayPal as the payment method
}

model Feature {
  id          Int       @id @default(autoincrement())
  name        String    // Name of the feature
  description String?   // Description of the feature
  plan        Plan      // Plan associated with the feature
  isEnabled   Boolean   @default(false) // Indicates if the feature is enabled for the given plan
  userId      String    // Foreign key reference to User
  user        User      @relation(fields: [userId], references: [id])
}
