generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  password        String?
  googleId        String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String?
  expiryTime      DateTime?
  otp             Int?
  userAccessToken String?
  freeTrialStart  DateTime?
  role            UserRole      @default(USER)
  profilepic      String?
  blogCount       Int           @default(0)
  isVerified      Boolean       @default(false)
  RefreshToken    String?
  lastActiveDay   DateTime      @default(now())
  payments        Payment[]
  post            Post[]
  subscriptions   Subscription?
  tokens          Token[]
}

model Token {
  id             Int      @id @default(autoincrement())
  userId         String
  platform       Platform
  platformUserId String?
  accessToken    String?
  refreshToken   String?
  mediumApi      String?
  postUrns       String[]
  expiryTime     String?
  mediumUserId   String?
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, platform])
}

model Post {
  id             Int      @id @default(autoincrement())
  userId         String
  title          String?
  subtitle       String?
  tags           String[]
  content        String
  dateOfCreation DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id             String       @id @default(uuid())
  userId         String       @unique
  plan           Plan         @default(FREE)
  status         String       @default("ACTIVE")
  startDate      DateTime     @default(now())
  billingCycle   BillingCycle @default(MONTHLY)
  remainingPosts Int          @default(1)
  nextDueDate    DateTime?
  invoiceLink    String?
  user           User         @relation(fields: [userId], references: [id])
}

model PlanFeature {
  id           Int           @id @default(autoincrement())
  plan         Plan
  featureName  String
  description  String?
  limit        Int
  billingCycle BillingCycle?
}

model Payment {
  id            Int           @id @default(autoincrement())
  userId        String
  amount        Float
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod @default(PAYPAL)
  status        String        @default("COMPLETED")
  payerId       String?
  paymentId     String
  user          User          @relation(fields: [userId], references: [id])
}

enum Platform {
  LINKEDIN
  MEDIUM
  BLOGGER
}

enum UserRole {
  USER
  ADMIN
}

enum Plan {
  FREE
  BASIC
  PREMIUM
  BUISNESS
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentMethod {
  PAYPAL
}
