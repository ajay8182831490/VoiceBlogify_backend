// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email          String  @unique   // here we have need to adjust in db
  password       String?    // Nullable, for email/password authentication
  googleId       String?   @unique  // Nullable, for Google OAuth authentication
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name      String?
  expiryTime  DateTime?
  otp   Int?
  tokens         Token[]    
  subscriptions  Subscription[] 
  accessToken String?
  freeTrialStart DateTime?  
  role           UserRole   @default(USER)

  profilepic String?

    payments         Payment[]
    features     Feature []
   blogCount  Int       @default(0)
   isVerified Boolean @default(false)
   post Post[]
}
model Token {
  id            Int        @id @default(autoincrement())
  userId        String      
  user          User       @relation(fields: [userId], references: [id])
  platform      Platform   
  platformUserId String?    // Unique ID for the user's account on the platform
  // Optional: Name or username of the account
  accessToken   String     // Access token for API requests
  refreshToken  String?    // Refresh token, if applicable
    // Token expiration time
    

  mediumApi String?

  postUrns    String[]   // Store multiple post URNs

  expiryTime  String?
  

  @@unique([userId, platform])
 
 
}
model Payment {
  id              Int            @id @default(autoincrement())
  userId          String           // Foreign key reference
  user            User           @relation(fields: [userId], references: [id])
  subscriptionId  String            // Foreign key reference
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])
  amount          Float
  paymentDate     DateTime       @default(now())
  paymentMethod   PaymentMethod
}
model Feature {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  plan        Plan  
  
    // Enum to define which plan has this feature
     userId String
      user            User           @relation(fields: [userId], references: [id])
}
model Subscription {
  id                    String        @id @default (uuid())
  userId                String       // Foreign key reference
  user                  User       @relation(fields: [userId], references: [id])
  stripeSubscriptionId  String     // Stripe subscription ID
  plan                  Plan       // Enum to define the subscription plan type
  status                String     @default("ACTIVE") // Could be ACTIVE, CANCELED, etc.
  startDate             DateTime   @default(now())
  endDate               DateTime?  // Nullable, used when the subscription ends
  isActive              Boolean    @default(true)
  billingCycle          BillingCycle
  trialEndDate          DateTime?  // Nullable, used to track the end of the free trial
  payments              Payment[]
}

model Post {
  id             Int       @id @default(autoincrement()) 
  userId         String                                 
  user           User      @relation(fields: [userId], references: [id]) 
  title          String?                               
  subtitle       String?                              
  tags           String[]                               
  content        String                                  
  dateOfCreation DateTime? @default(now())    
}    




enum Platform {
  LINKEDIN
  MEDIUM

BLOGGER

  // Add other platforms as needed
}

enum Plan {
  FREE
  BASIC
  
  PREMIUM
  BUISNESS
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
 
}

enum UserRole {
  USER
  ADMIN
}
